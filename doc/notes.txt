cli
* Consider switching from argparse to optparse
  https://github.com/skeeto/optparse

crypto
* Consider using paseto or similar for stateless capabilities
  https://github.com/paseto-standard/paseto-spec
* Consider using (x)chacha20+blake3 (instead of chacha20+poly1305) for aead
  to add committment to the crypto properties

NIK todo
* Update counter check to use algorithm in RFC 6479 as in WG-Go
  https://github.com/WireGuard/wireguard-go/blob/master/replay/replay.go
* In Cxn, check if we're triggering on timeouts too often (already acted upon)
  e.g. if (cxn->current.send_n >= NIK_LIMIT_REKEY_AFTER_MESSAGES)
* Lifetime for enqueue payload
* If both A and B initiate a handshake simultaneously what happens?
* Review wg-go replay + flood prevention
  On init message check (ConsumeMessageInititation)
  replay := !timestamp.after(handshake.last_timestamp)
  flood := time.since(handshake.last_initiation_consumption) <= HandshakeInitiationRate (20ms)
* Rm use of HMAC Blake2 and just used keyed Blake2? All the KDFs could do this
  Or Implement HMAC-based KDF functions like in wg-go noise-helpers.go?

Signal todo
* Routing - consider using sender/recveiver ids like Wireguard, but maybe
  random each time with a nextid in each message
* Verify counter nonce usage won't repeat (separate tx and rx keys?)
* One-time prekeys, or alternative anti-replay mechanism, maybe borrowing from
  Wireguard
* Out-of-order message support
* Consider adding PQXDH: https://signal.org/docs/specifications/pqxdh/
  https://github.com/open-quantum-safe/liboqs
  ML-KEM, Kyber, FIPS 203
  https://github.com/pq-crystals/kyber
  https://github.com/cryspen/libcrux/tree/main/libcrux-ml-kem
  https://github.com/itzmeanjan/ml-kem
  https://github.com/GiacomoPope/kyber-py
* Sesame session management

kv
* libkv interface
* lmdb impl
* Consider CipherSweet for searchable db
  https://ciphersweet.paragonie.com

key usability
* password-protected key
* read+use ssh-keygen/openssl ed25519 keys

uvco
* consider storing handles in the coroutine frame? instead of malloc

ngtcp2
* Real crypto
* Package up wrapper
* Connection lifecycle, hashmap
* Handle ngtcp2_conn_read_pkt err codes
* Retry packets
* Stateless reset tokens

compile
* rm build.zig
* -fsanitize=memory,address,undefined -fsanitize-memory-track-origins -fno-common
	-fsanitize=undefined,bounds,safe-stack -fsanitize-undefined-trap-on-error
  -fsanitize=integer -fsanitize-minimal-runtime -fno-sanitize-recover
* Hardening flags
  https://best.openssf.org/Compiler-Hardening-Guides/Compiler-Options-Hardening-Guide-for-C-and-C++.html
  -fsanitize=address -fsanitize=leak -fno-omit-frame-pointer -fsanitize=undefined  -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fsanitize=integer
export ASAN_OPTIONS=strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2
	-Walloca -Wcast-qual -Wconversion -Wformat=2 -Wformat-security -Wnull-dereference -Wstack-protector -Wvla -Warray-bounds -Warray-bounds-pointer-arithmetic -Wassign-enum -Wbad-function-cast -Wconditional-uninitialized -Wconversion -Wfloat-equal -Wformat-type-confusion -Widiomatic-parentheses -Wimplicit-fallthrough -Wloop-analysis -Wpointer-arith -Wshift-sign-overflow -Wshorten-64-to-32 -Wswitch-enum -Wtautological-constant-in-range-compare -Wunreachable-code-aggressive -Wthread-safety -Wthread-safety-beta -Wcomma
   -Wl,-z,separate-loadable-segments
   -fno-delete-null-pointer-checks -fno-strict-aliasing -ftrivial-auto-var-init=zero
   -Werror=implicit -Werror=incompatible-pointer-types -Werror=int-conversion
    -Wformat -Wformat=2 -Wformat-security \
   -fcf-protection=full
   -mbranch-protection=standard
   -z nodlopen
	-fsanitize=undefined,bounds -fsanitize-undefined-trap-on-error \
* compile with gcc

Valgrind example
make --silent -j VALGRIND=1 && \
  MIMALLOC_SHOW_STATS=1 valgrind -s --leak-check=full --show-leak-kinds=all \
  --track-origins=yes --num-callers=16 \
  ./build/cli/bin/cli demo-tcp2
