NIK todo
* Update counter check to use algorithm in RFC 6479 as in WG-Go
  https://github.com/WireGuard/wireguard-go/blob/master/replay/replay.go
* In Cxn, check if we're triggering on timeouts too often (already acted upon)
  e.g. if (cxn->current.send_n >= NIK_LIMIT_REKEY_AFTER_MESSAGES)
* Lifetime for enqueue payload
* If both A and B initiate a handshake simultaneously what happens?
* Implement HMAC-based KDF functions like in wg-go noise-helpers.go?
* Review wg-go replay + flood prevention
  On init message check (ConsumeMessageInititation)
  replay := !timestamp.after(handshake.last_timestamp)
  flood := time.since(handshake.last_initiation_consumption) <= HandshakeInitiationRate (20ms)

Signal todo
* Verify counter nonce usage won't repeat (separate tx and rx keys?)
* We haven't authenticated when we update state. Header encryption would solve.
* See where we may want/need to memzero
* One-time prekeys, or alternative anti-replay mechanism, maybe borrowing from
  Wireguard
* Out-of-order message support
* Consider adding PQXDH: https://signal.org/docs/specifications/pqxdh/
* Sesame session management

kv
* libkv interface
* lmdb impl

key usability
* password-protected key
* read+use ssh-keygen/openssl ed25519 keys

uvco
* uv_close_handle expects the handle to outlive the call, so handle can't be
  stack allocated...
